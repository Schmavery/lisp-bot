(define-macro ; (lambda (x ...) ()))

(define-macro nil?
  "Takes a variadic number of arguments. Returns true if all the arguments are null. Returns true when given no arguments."
  (lambda (x ...)
    `(equal? () () ~@x)))

(define not
  (lambda (expr)
    (if expr false true)))

(define second
  (lambda (x)
    (car (cdr x))))

(define-macro and
  "Evaluates arguments from left to right until it hits one that evaluates to false. If all of expressions evaluate to true, it will return true. Otherwise it will return false."
  (lambda (x args ...)
    (if (nil? x)
      true
      `(if ~x (and ~@args) false))))

(define-macro or
  "Evaluates arguments from left to right until it hits one that evaluates to true. If one of the expressions evaluate to true, it will return true. Otherwise it will return false."
  (lambda (x args ...)
    (if (nil? x)
      false
      `(if ~x true (or ~@args)))))

(define len (lambda (coll)
  (if (nil? coll)
    0
    (+ 1 (len (cdr coll))))))

(define even-len? (lambda (coll)
  (if (nil? coll)
    true
    (not (even-len? (cdr coll))))))

(define every-other-odd
  (lambda (coll)
    (if (nil? coll)
      ()
      (if (even-len? coll)
        (every-other-odd (cdr coll))
        (cons (car coll) (every-other-odd (cdr coll)))))))

(define every-other-even
  (lambda (coll)
    (if (nil? coll)
      ()
      (if (even-len? coll)
        (cons (car coll) (every-other-even (cdr coll)))
        (every-other-even (cdr coll))))))

(define-macro let
  "Todo"
  (lambda (vars body)
    `((lambda ~(every-other-even vars) ~body) ~@(every-other-odd vars))))

(define-macro cond
  "Todo"
  (lambda (x rest ...)
  `(if ~(car x)
       ~(car (cdr x))
        (if ~(nil? rest)
          ()
          (cond ~@rest)))))

(define-macro ->>
  "Usage: (->> x & funcs)

  Threads the expr through the lambdas. Inserts x as the last item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the last item in second form, etc. (from clojuredocs)"
  (lambda (data rest ...)
    `(cond
       (~(nil? rest) ~data)
       (~(nil? (cdr rest)) (~@(car rest) ~data))
       (true (->> (~@(car rest) ~data) ~@(cdr rest))))))

(define-macro ->
  "Usage: (-> x & forms)

  Threads the expr through the forms. Inserts x as the second item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the second item in second form, etc. (from clojuredocs)"
  (lambda (data rest ...)
    `(cond
       (~(nil? rest) ~data)
       (~(nil? (cdr rest)) (~(car (car rest)) ~data ~@(cdr (car rest))))
       (true (->> (~@(car rest) ~data) ~@(cdr rest))))))

(define nth
  (lambda (lst n)
    (if (equal? n 0)
	  (car lst)
	  (nth (cdr lst) (- n 1)))))

(define m-get
  (lambda (lst key)
          (cond
            ((nil? lst) '())
            ((equal? (car (car lst)) key) (car (cdr (car lst))))
            (true (m-get (cdr lst) key)))))

(define m-put
  (lambda (lst key val)
          (cons (cons key val) lst)))