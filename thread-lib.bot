(define scores (ref (hashmap)))
(define lists (ref (hashmap)))

(define score (lambda (name) (if (nil? ((get scores) name)) 0 ((get scores) name))))
(define inc-score (lambda (name) (report (set! scores (assoc (get scores) name (+ 1 (score name)))) "Score increased")))

(define pp-list (lambda (name lst)
  (join
    (list
      name
      (join
        (map (lambda (n item) (join (list n item) " - ")) (range (len lst)) lst)
        "\n"
      )
    )
    ":\n-----\n"
  )
))

(define list-all (lambda (args ...)
  (cond
    ((nil? args)
      (pp-list "All Lists" (map (lambda (e) (car e)) ((get lists)))))
    ((and (equal? (len args) 1) (type? (car args) "string"))
      (pp-list (car args) ((get lists) (car args)))
    )
    (true "list-all should be called with no arguments or with the name of a list.")
  )
))

(define list-add (lambda (args ...)
  (cond
    ((and (equal? (len args) 1) (type? (car args) "string"))
      (report (set! lists (assoc (get lists) (car args) '())) "List added."))
    ((and (equal? (len args) 2) (type? (car args) "string") (type? (second args) "string"))
      (report
        (set!
          lists
          (assoc
            (get lists)
            (car args)
            (cons
              (second args)
              (if (nil? ((get lists) (car args))) '() ((get lists) (car args))))
          )
        )
        "List item added."
      )
    )
    (true "list-add should be called with the name of a new list or with the name of a list and the content of an item.")
  )
))


(; define remove (lambda (args ...)
   (cond
    ((nil? args) "Remove requires arguments")
    ((and (equal? (len args) 1) (type? (car args) "string"))
      (report (set! lists (assoc (get lists) (car args) '())) "List removed."))
    ((and (equal? (len args) 2) (type? (second args) "number"))
      (report
        (set!
          lists
          (assoc
            (get lists)
            (car args)
            (remove-nth
              (if (nil? ((get lists) (car args))) '() ((get lists) (car args)))
              (second args)
            )
          )
        )
        "List item removed."
      )
    )
    (true)
  )
))
